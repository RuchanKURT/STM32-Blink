
Blink-Led1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001c6c  08001c6c  00011c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ca4  08001ca4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ca4  08001ca4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ca4  08001ca4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ca4  08001ca4  00011ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ca8  08001ca8  00011ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08001cb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08001cb8  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007104  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000111e  00000000  00000000  00027138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000590  00000000  00000000  00028258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000528  00000000  00000000  000287e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001702a  00000000  00000000  00028d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000739c  00000000  00000000  0003fd3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084fc9  00000000  00000000  000470d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc09f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012a4  00000000  00000000  000cc0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001c54 	.word	0x08001c54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001c54 	.word	0x08001c54

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f9ba 	bl	800059c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f812 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f88a 	bl	8000344 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f858 	bl	80002e4 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <main+0x2c>)
 8000236:	2108      	movs	r1, #8
 8000238:	0018      	movs	r0, r3
 800023a:	f000 fc70 	bl	8000b1e <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 800023e:	23fa      	movs	r3, #250	; 0xfa
 8000240:	00db      	lsls	r3, r3, #3
 8000242:	0018      	movs	r0, r3
 8000244:	f000 fa0e 	bl	8000664 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000248:	e7f4      	b.n	8000234 <main+0x14>
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	48000400 	.word	0x48000400

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b093      	sub	sp, #76	; 0x4c
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	2414      	movs	r4, #20
 8000258:	193b      	adds	r3, r7, r4
 800025a:	0018      	movs	r0, r3
 800025c:	2334      	movs	r3, #52	; 0x34
 800025e:	001a      	movs	r2, r3
 8000260:	2100      	movs	r1, #0
 8000262:	f001 fcef 	bl	8001c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	0018      	movs	r0, r3
 800026a:	2310      	movs	r3, #16
 800026c:	001a      	movs	r2, r3
 800026e:	2100      	movs	r1, #0
 8000270:	f001 fce8 	bl	8001c44 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000274:	0021      	movs	r1, r4
 8000276:	187b      	adds	r3, r7, r1
 8000278:	2202      	movs	r2, #2
 800027a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	187b      	adds	r3, r7, r1
 800027e:	2201      	movs	r2, #1
 8000280:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2210      	movs	r2, #16
 8000286:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2202      	movs	r2, #2
 800028c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2280      	movs	r2, #128	; 0x80
 8000292:	0212      	lsls	r2, r2, #8
 8000294:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2200      	movs	r2, #0
 800029a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2200      	movs	r2, #0
 80002a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 fc55 	bl	8000b54 <HAL_RCC_OscConfig>
 80002aa:	1e03      	subs	r3, r0, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002ae:	f000 f89f 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2207      	movs	r2, #7
 80002b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2202      	movs	r2, #2
 80002bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2100      	movs	r1, #0
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 ffc6 	bl	8001260 <HAL_RCC_ClockConfig>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80002d8:	f000 f88a 	bl	80003f0 <Error_Handler>
  }
}
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	b013      	add	sp, #76	; 0x4c
 80002e2:	bd90      	pop	{r4, r7, pc}

080002e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002e8:	4b14      	ldr	r3, [pc, #80]	; (800033c <MX_USART2_UART_Init+0x58>)
 80002ea:	4a15      	ldr	r2, [pc, #84]	; (8000340 <MX_USART2_UART_Init+0x5c>)
 80002ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002ee:	4b13      	ldr	r3, [pc, #76]	; (800033c <MX_USART2_UART_Init+0x58>)
 80002f0:	2296      	movs	r2, #150	; 0x96
 80002f2:	0212      	lsls	r2, r2, #8
 80002f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_USART2_UART_Init+0x58>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_USART2_UART_Init+0x58>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_USART2_UART_Init+0x58>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_USART2_UART_Init+0x58>)
 800030a:	220c      	movs	r2, #12
 800030c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_USART2_UART_Init+0x58>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_USART2_UART_Init+0x58>)
 8000316:	2200      	movs	r2, #0
 8000318:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_USART2_UART_Init+0x58>)
 800031c:	2200      	movs	r2, #0
 800031e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_USART2_UART_Init+0x58>)
 8000322:	2200      	movs	r2, #0
 8000324:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000326:	4b05      	ldr	r3, [pc, #20]	; (800033c <MX_USART2_UART_Init+0x58>)
 8000328:	0018      	movs	r0, r3
 800032a:	f001 f913 	bl	8001554 <HAL_UART_Init>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000332:	f000 f85d 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000028 	.word	0x20000028
 8000340:	40004400 	.word	0x40004400

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b590      	push	{r4, r7, lr}
 8000346:	b089      	sub	sp, #36	; 0x24
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	240c      	movs	r4, #12
 800034c:	193b      	adds	r3, r7, r4
 800034e:	0018      	movs	r0, r3
 8000350:	2314      	movs	r3, #20
 8000352:	001a      	movs	r2, r3
 8000354:	2100      	movs	r1, #0
 8000356:	f001 fc75 	bl	8001c44 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800035a:	4b23      	ldr	r3, [pc, #140]	; (80003e8 <MX_GPIO_Init+0xa4>)
 800035c:	695a      	ldr	r2, [r3, #20]
 800035e:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <MX_GPIO_Init+0xa4>)
 8000360:	2180      	movs	r1, #128	; 0x80
 8000362:	03c9      	lsls	r1, r1, #15
 8000364:	430a      	orrs	r2, r1
 8000366:	615a      	str	r2, [r3, #20]
 8000368:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <MX_GPIO_Init+0xa4>)
 800036a:	695a      	ldr	r2, [r3, #20]
 800036c:	2380      	movs	r3, #128	; 0x80
 800036e:	03db      	lsls	r3, r3, #15
 8000370:	4013      	ands	r3, r2
 8000372:	60bb      	str	r3, [r7, #8]
 8000374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000376:	4b1c      	ldr	r3, [pc, #112]	; (80003e8 <MX_GPIO_Init+0xa4>)
 8000378:	695a      	ldr	r2, [r3, #20]
 800037a:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <MX_GPIO_Init+0xa4>)
 800037c:	2180      	movs	r1, #128	; 0x80
 800037e:	0289      	lsls	r1, r1, #10
 8000380:	430a      	orrs	r2, r1
 8000382:	615a      	str	r2, [r3, #20]
 8000384:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <MX_GPIO_Init+0xa4>)
 8000386:	695a      	ldr	r2, [r3, #20]
 8000388:	2380      	movs	r3, #128	; 0x80
 800038a:	029b      	lsls	r3, r3, #10
 800038c:	4013      	ands	r3, r2
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <MX_GPIO_Init+0xa4>)
 8000394:	695a      	ldr	r2, [r3, #20]
 8000396:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <MX_GPIO_Init+0xa4>)
 8000398:	2180      	movs	r1, #128	; 0x80
 800039a:	02c9      	lsls	r1, r1, #11
 800039c:	430a      	orrs	r2, r1
 800039e:	615a      	str	r2, [r3, #20]
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_GPIO_Init+0xa4>)
 80003a2:	695a      	ldr	r2, [r3, #20]
 80003a4:	2380      	movs	r3, #128	; 0x80
 80003a6:	02db      	lsls	r3, r3, #11
 80003a8:	4013      	ands	r3, r2
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003ae:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_GPIO_Init+0xa8>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	2108      	movs	r1, #8
 80003b4:	0018      	movs	r0, r3
 80003b6:	f000 fb95 	bl	8000ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003ba:	0021      	movs	r1, r4
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2208      	movs	r2, #8
 80003c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2201      	movs	r2, #1
 80003c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2200      	movs	r2, #0
 80003d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	4a05      	ldr	r2, [pc, #20]	; (80003ec <MX_GPIO_Init+0xa8>)
 80003d8:	0019      	movs	r1, r3
 80003da:	0010      	movs	r0, r2
 80003dc:	f000 fa1a 	bl	8000814 <HAL_GPIO_Init>

}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b009      	add	sp, #36	; 0x24
 80003e6:	bd90      	pop	{r4, r7, pc}
 80003e8:	40021000 	.word	0x40021000
 80003ec:	48000400 	.word	0x48000400

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <Error_Handler+0x8>
	...

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <HAL_MspInit+0x44>)
 8000404:	699a      	ldr	r2, [r3, #24]
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <HAL_MspInit+0x44>)
 8000408:	2101      	movs	r1, #1
 800040a:	430a      	orrs	r2, r1
 800040c:	619a      	str	r2, [r3, #24]
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <HAL_MspInit+0x44>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	2201      	movs	r2, #1
 8000414:	4013      	ands	r3, r2
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <HAL_MspInit+0x44>)
 800041c:	69da      	ldr	r2, [r3, #28]
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <HAL_MspInit+0x44>)
 8000420:	2180      	movs	r1, #128	; 0x80
 8000422:	0549      	lsls	r1, r1, #21
 8000424:	430a      	orrs	r2, r1
 8000426:	61da      	str	r2, [r3, #28]
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <HAL_MspInit+0x44>)
 800042a:	69da      	ldr	r2, [r3, #28]
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	055b      	lsls	r3, r3, #21
 8000430:	4013      	ands	r3, r2
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b002      	add	sp, #8
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	40021000 	.word	0x40021000

08000444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b08b      	sub	sp, #44	; 0x2c
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	2414      	movs	r4, #20
 800044e:	193b      	adds	r3, r7, r4
 8000450:	0018      	movs	r0, r3
 8000452:	2314      	movs	r3, #20
 8000454:	001a      	movs	r2, r3
 8000456:	2100      	movs	r1, #0
 8000458:	f001 fbf4 	bl	8001c44 <memset>
  if(huart->Instance==USART2)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a1c      	ldr	r2, [pc, #112]	; (80004d4 <HAL_UART_MspInit+0x90>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d132      	bne.n	80004cc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000466:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <HAL_UART_MspInit+0x94>)
 8000468:	69da      	ldr	r2, [r3, #28]
 800046a:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <HAL_UART_MspInit+0x94>)
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	0289      	lsls	r1, r1, #10
 8000470:	430a      	orrs	r2, r1
 8000472:	61da      	str	r2, [r3, #28]
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <HAL_UART_MspInit+0x94>)
 8000476:	69da      	ldr	r2, [r3, #28]
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	029b      	lsls	r3, r3, #10
 800047c:	4013      	ands	r3, r2
 800047e:	613b      	str	r3, [r7, #16]
 8000480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <HAL_UART_MspInit+0x94>)
 8000484:	695a      	ldr	r2, [r3, #20]
 8000486:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <HAL_UART_MspInit+0x94>)
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	0289      	lsls	r1, r1, #10
 800048c:	430a      	orrs	r2, r1
 800048e:	615a      	str	r2, [r3, #20]
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <HAL_UART_MspInit+0x94>)
 8000492:	695a      	ldr	r2, [r3, #20]
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	029b      	lsls	r3, r3, #10
 8000498:	4013      	ands	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800049e:	0021      	movs	r1, r4
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <HAL_UART_MspInit+0x98>)
 80004a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2202      	movs	r2, #2
 80004aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2203      	movs	r2, #3
 80004b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2201      	movs	r2, #1
 80004bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004be:	187a      	adds	r2, r7, r1
 80004c0:	2390      	movs	r3, #144	; 0x90
 80004c2:	05db      	lsls	r3, r3, #23
 80004c4:	0011      	movs	r1, r2
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 f9a4 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b00b      	add	sp, #44	; 0x2c
 80004d2:	bd90      	pop	{r4, r7, pc}
 80004d4:	40004400 	.word	0x40004400
 80004d8:	40021000 	.word	0x40021000
 80004dc:	00008004 	.word	0x00008004

080004e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <NMI_Handler+0x4>

080004e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <HardFault_Handler+0x4>

080004ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000504:	f000 f892 	bl	800062c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000518:	4813      	ldr	r0, [pc, #76]	; (8000568 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800051c:	4813      	ldr	r0, [pc, #76]	; (800056c <LoopForever+0x6>)
    LDR R1, [R0]
 800051e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000520:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000522:	4a13      	ldr	r2, [pc, #76]	; (8000570 <LoopForever+0xa>)
    CMP R1, R2
 8000524:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000526:	d105      	bne.n	8000534 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000528:	4812      	ldr	r0, [pc, #72]	; (8000574 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800052a:	4913      	ldr	r1, [pc, #76]	; (8000578 <LoopForever+0x12>)
    STR R1, [R0]
 800052c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800052e:	4813      	ldr	r0, [pc, #76]	; (800057c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000530:	4913      	ldr	r1, [pc, #76]	; (8000580 <LoopForever+0x1a>)
    STR R1, [R0]
 8000532:	6001      	str	r1, [r0, #0]

08000534 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	4813      	ldr	r0, [pc, #76]	; (8000584 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000536:	4914      	ldr	r1, [pc, #80]	; (8000588 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000538:	4a14      	ldr	r2, [pc, #80]	; (800058c <LoopForever+0x26>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a11      	ldr	r2, [pc, #68]	; (8000590 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800054c:	4c11      	ldr	r4, [pc, #68]	; (8000594 <LoopForever+0x2e>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800055a:	f7ff ffd8 	bl	800050e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800055e:	f001 fb4d 	bl	8001bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000562:	f7ff fe5d 	bl	8000220 <main>

08000566 <LoopForever>:

LoopForever:
    b LoopForever
 8000566:	e7fe      	b.n	8000566 <LoopForever>
  ldr   r0, =_estack
 8000568:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800056c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000570:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000574:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000578:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800057c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000580:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000588:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800058c:	08001cac 	.word	0x08001cac
  ldr r2, =_sbss
 8000590:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000594:	200000b0 	.word	0x200000b0

08000598 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000598:	e7fe      	b.n	8000598 <ADC1_IRQHandler>
	...

0800059c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <HAL_Init+0x24>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_Init+0x24>)
 80005a6:	2110      	movs	r1, #16
 80005a8:	430a      	orrs	r2, r1
 80005aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f000 f809 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b2:	f7ff ff23 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	0018      	movs	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	40022000 	.word	0x40022000

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <HAL_InitTick+0x5c>)
 80005ce:	681c      	ldr	r4, [r3, #0]
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <HAL_InitTick+0x60>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	0019      	movs	r1, r3
 80005d6:	23fa      	movs	r3, #250	; 0xfa
 80005d8:	0098      	lsls	r0, r3, #2
 80005da:	f7ff fd95 	bl	8000108 <__udivsi3>
 80005de:	0003      	movs	r3, r0
 80005e0:	0019      	movs	r1, r3
 80005e2:	0020      	movs	r0, r4
 80005e4:	f7ff fd90 	bl	8000108 <__udivsi3>
 80005e8:	0003      	movs	r3, r0
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 f905 	bl	80007fa <HAL_SYSTICK_Config>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80005f4:	2301      	movs	r3, #1
 80005f6:	e00f      	b.n	8000618 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b03      	cmp	r3, #3
 80005fc:	d80b      	bhi.n	8000616 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	2301      	movs	r3, #1
 8000602:	425b      	negs	r3, r3
 8000604:	2200      	movs	r2, #0
 8000606:	0018      	movs	r0, r3
 8000608:	f000 f8e2 	bl	80007d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_InitTick+0x64>)
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000612:	2300      	movs	r3, #0
 8000614:	e000      	b.n	8000618 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
}
 8000618:	0018      	movs	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	b003      	add	sp, #12
 800061e:	bd90      	pop	{r4, r7, pc}
 8000620:	20000000 	.word	0x20000000
 8000624:	20000008 	.word	0x20000008
 8000628:	20000004 	.word	0x20000004

0800062c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_IncTick+0x1c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	001a      	movs	r2, r3
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <HAL_IncTick+0x20>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	18d2      	adds	r2, r2, r3
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <HAL_IncTick+0x20>)
 800063e:	601a      	str	r2, [r3, #0]
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	20000008 	.word	0x20000008
 800064c:	200000ac 	.word	0x200000ac

08000650 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  return uwTick;
 8000654:	4b02      	ldr	r3, [pc, #8]	; (8000660 <HAL_GetTick+0x10>)
 8000656:	681b      	ldr	r3, [r3, #0]
}
 8000658:	0018      	movs	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	200000ac 	.word	0x200000ac

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff fff0 	bl	8000650 <HAL_GetTick>
 8000670:	0003      	movs	r3, r0
 8000672:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <HAL_Delay+0x44>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	001a      	movs	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	189b      	adds	r3, r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	f7ff ffe0 	bl	8000650 <HAL_GetTick>
 8000690:	0002      	movs	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b004      	add	sp, #16
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	20000008 	.word	0x20000008

080006ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	0002      	movs	r2, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b7f      	cmp	r3, #127	; 0x7f
 80006c0:	d828      	bhi.n	8000714 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006c2:	4a2f      	ldr	r2, [pc, #188]	; (8000780 <__NVIC_SetPriority+0xd4>)
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	089b      	lsrs	r3, r3, #2
 80006cc:	33c0      	adds	r3, #192	; 0xc0
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	589b      	ldr	r3, [r3, r2]
 80006d2:	1dfa      	adds	r2, r7, #7
 80006d4:	7812      	ldrb	r2, [r2, #0]
 80006d6:	0011      	movs	r1, r2
 80006d8:	2203      	movs	r2, #3
 80006da:	400a      	ands	r2, r1
 80006dc:	00d2      	lsls	r2, r2, #3
 80006de:	21ff      	movs	r1, #255	; 0xff
 80006e0:	4091      	lsls	r1, r2
 80006e2:	000a      	movs	r2, r1
 80006e4:	43d2      	mvns	r2, r2
 80006e6:	401a      	ands	r2, r3
 80006e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	019b      	lsls	r3, r3, #6
 80006ee:	22ff      	movs	r2, #255	; 0xff
 80006f0:	401a      	ands	r2, r3
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	0018      	movs	r0, r3
 80006f8:	2303      	movs	r3, #3
 80006fa:	4003      	ands	r3, r0
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000700:	481f      	ldr	r0, [pc, #124]	; (8000780 <__NVIC_SetPriority+0xd4>)
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b25b      	sxtb	r3, r3
 8000708:	089b      	lsrs	r3, r3, #2
 800070a:	430a      	orrs	r2, r1
 800070c:	33c0      	adds	r3, #192	; 0xc0
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000712:	e031      	b.n	8000778 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000714:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <__NVIC_SetPriority+0xd8>)
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	0019      	movs	r1, r3
 800071c:	230f      	movs	r3, #15
 800071e:	400b      	ands	r3, r1
 8000720:	3b08      	subs	r3, #8
 8000722:	089b      	lsrs	r3, r3, #2
 8000724:	3306      	adds	r3, #6
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	18d3      	adds	r3, r2, r3
 800072a:	3304      	adds	r3, #4
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1dfa      	adds	r2, r7, #7
 8000730:	7812      	ldrb	r2, [r2, #0]
 8000732:	0011      	movs	r1, r2
 8000734:	2203      	movs	r2, #3
 8000736:	400a      	ands	r2, r1
 8000738:	00d2      	lsls	r2, r2, #3
 800073a:	21ff      	movs	r1, #255	; 0xff
 800073c:	4091      	lsls	r1, r2
 800073e:	000a      	movs	r2, r1
 8000740:	43d2      	mvns	r2, r2
 8000742:	401a      	ands	r2, r3
 8000744:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	019b      	lsls	r3, r3, #6
 800074a:	22ff      	movs	r2, #255	; 0xff
 800074c:	401a      	ands	r2, r3
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	0018      	movs	r0, r3
 8000754:	2303      	movs	r3, #3
 8000756:	4003      	ands	r3, r0
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <__NVIC_SetPriority+0xd8>)
 800075e:	1dfb      	adds	r3, r7, #7
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	001c      	movs	r4, r3
 8000764:	230f      	movs	r3, #15
 8000766:	4023      	ands	r3, r4
 8000768:	3b08      	subs	r3, #8
 800076a:	089b      	lsrs	r3, r3, #2
 800076c:	430a      	orrs	r2, r1
 800076e:	3306      	adds	r3, #6
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	18c3      	adds	r3, r0, r3
 8000774:	3304      	adds	r3, #4
 8000776:	601a      	str	r2, [r3, #0]
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b003      	add	sp, #12
 800077e:	bd90      	pop	{r4, r7, pc}
 8000780:	e000e100 	.word	0xe000e100
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	1e5a      	subs	r2, r3, #1
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	045b      	lsls	r3, r3, #17
 8000798:	429a      	cmp	r2, r3
 800079a:	d301      	bcc.n	80007a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079c:	2301      	movs	r3, #1
 800079e:	e010      	b.n	80007c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <SysTick_Config+0x44>)
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	3a01      	subs	r2, #1
 80007a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a8:	2301      	movs	r3, #1
 80007aa:	425b      	negs	r3, r3
 80007ac:	2103      	movs	r1, #3
 80007ae:	0018      	movs	r0, r3
 80007b0:	f7ff ff7c 	bl	80006ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <SysTick_Config+0x44>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SysTick_Config+0x44>)
 80007bc:	2207      	movs	r2, #7
 80007be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	0018      	movs	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b002      	add	sp, #8
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	e000e010 	.word	0xe000e010

080007d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	210f      	movs	r1, #15
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	1c02      	adds	r2, r0, #0
 80007e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b25b      	sxtb	r3, r3
 80007ea:	0011      	movs	r1, r2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f7ff ff5d 	bl	80006ac <__NVIC_SetPriority>
}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b004      	add	sp, #16
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff ffbf 	bl	8000788 <SysTick_Config>
 800080a:	0003      	movs	r3, r0
}
 800080c:	0018      	movs	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	b002      	add	sp, #8
 8000812:	bd80      	pop	{r7, pc}

08000814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000822:	e149      	b.n	8000ab8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2101      	movs	r1, #1
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4091      	lsls	r1, r2
 800082e:	000a      	movs	r2, r1
 8000830:	4013      	ands	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d100      	bne.n	800083c <HAL_GPIO_Init+0x28>
 800083a:	e13a      	b.n	8000ab2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	2203      	movs	r2, #3
 8000842:	4013      	ands	r3, r2
 8000844:	2b01      	cmp	r3, #1
 8000846:	d005      	beq.n	8000854 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	2203      	movs	r2, #3
 800084e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000850:	2b02      	cmp	r3, #2
 8000852:	d130      	bne.n	80008b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	2203      	movs	r2, #3
 8000860:	409a      	lsls	r2, r3
 8000862:	0013      	movs	r3, r2
 8000864:	43da      	mvns	r2, r3
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	4013      	ands	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	68da      	ldr	r2, [r3, #12]
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	409a      	lsls	r2, r3
 8000876:	0013      	movs	r3, r2
 8000878:	693a      	ldr	r2, [r7, #16]
 800087a:	4313      	orrs	r3, r2
 800087c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800088a:	2201      	movs	r2, #1
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	409a      	lsls	r2, r3
 8000890:	0013      	movs	r3, r2
 8000892:	43da      	mvns	r2, r3
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	4013      	ands	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	091b      	lsrs	r3, r3, #4
 80008a0:	2201      	movs	r2, #1
 80008a2:	401a      	ands	r2, r3
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	409a      	lsls	r2, r3
 80008a8:	0013      	movs	r3, r2
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2203      	movs	r2, #3
 80008bc:	4013      	ands	r3, r2
 80008be:	2b03      	cmp	r3, #3
 80008c0:	d017      	beq.n	80008f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	2203      	movs	r2, #3
 80008ce:	409a      	lsls	r2, r3
 80008d0:	0013      	movs	r3, r2
 80008d2:	43da      	mvns	r2, r3
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	4013      	ands	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	689a      	ldr	r2, [r3, #8]
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	409a      	lsls	r2, r3
 80008e4:	0013      	movs	r3, r2
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2203      	movs	r2, #3
 80008f8:	4013      	ands	r3, r2
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d123      	bne.n	8000946 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	08da      	lsrs	r2, r3, #3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3208      	adds	r2, #8
 8000906:	0092      	lsls	r2, r2, #2
 8000908:	58d3      	ldr	r3, [r2, r3]
 800090a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	2207      	movs	r2, #7
 8000910:	4013      	ands	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	220f      	movs	r2, #15
 8000916:	409a      	lsls	r2, r3
 8000918:	0013      	movs	r3, r2
 800091a:	43da      	mvns	r2, r3
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	4013      	ands	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	691a      	ldr	r2, [r3, #16]
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	2107      	movs	r1, #7
 800092a:	400b      	ands	r3, r1
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	409a      	lsls	r2, r3
 8000930:	0013      	movs	r3, r2
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	4313      	orrs	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	08da      	lsrs	r2, r3, #3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3208      	adds	r2, #8
 8000940:	0092      	lsls	r2, r2, #2
 8000942:	6939      	ldr	r1, [r7, #16]
 8000944:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	2203      	movs	r2, #3
 8000952:	409a      	lsls	r2, r3
 8000954:	0013      	movs	r3, r2
 8000956:	43da      	mvns	r2, r3
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	4013      	ands	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	2203      	movs	r2, #3
 8000964:	401a      	ands	r2, r3
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	409a      	lsls	r2, r3
 800096c:	0013      	movs	r3, r2
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4313      	orrs	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685a      	ldr	r2, [r3, #4]
 800097e:	23c0      	movs	r3, #192	; 0xc0
 8000980:	029b      	lsls	r3, r3, #10
 8000982:	4013      	ands	r3, r2
 8000984:	d100      	bne.n	8000988 <HAL_GPIO_Init+0x174>
 8000986:	e094      	b.n	8000ab2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000988:	4b51      	ldr	r3, [pc, #324]	; (8000ad0 <HAL_GPIO_Init+0x2bc>)
 800098a:	699a      	ldr	r2, [r3, #24]
 800098c:	4b50      	ldr	r3, [pc, #320]	; (8000ad0 <HAL_GPIO_Init+0x2bc>)
 800098e:	2101      	movs	r1, #1
 8000990:	430a      	orrs	r2, r1
 8000992:	619a      	str	r2, [r3, #24]
 8000994:	4b4e      	ldr	r3, [pc, #312]	; (8000ad0 <HAL_GPIO_Init+0x2bc>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	2201      	movs	r2, #1
 800099a:	4013      	ands	r3, r2
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009a0:	4a4c      	ldr	r2, [pc, #304]	; (8000ad4 <HAL_GPIO_Init+0x2c0>)
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	089b      	lsrs	r3, r3, #2
 80009a6:	3302      	adds	r3, #2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	589b      	ldr	r3, [r3, r2]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	2203      	movs	r2, #3
 80009b2:	4013      	ands	r3, r2
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	220f      	movs	r2, #15
 80009b8:	409a      	lsls	r2, r3
 80009ba:	0013      	movs	r3, r2
 80009bc:	43da      	mvns	r2, r3
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	2390      	movs	r3, #144	; 0x90
 80009c8:	05db      	lsls	r3, r3, #23
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d00d      	beq.n	80009ea <HAL_GPIO_Init+0x1d6>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a41      	ldr	r2, [pc, #260]	; (8000ad8 <HAL_GPIO_Init+0x2c4>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d007      	beq.n	80009e6 <HAL_GPIO_Init+0x1d2>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a40      	ldr	r2, [pc, #256]	; (8000adc <HAL_GPIO_Init+0x2c8>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d101      	bne.n	80009e2 <HAL_GPIO_Init+0x1ce>
 80009de:	2302      	movs	r3, #2
 80009e0:	e004      	b.n	80009ec <HAL_GPIO_Init+0x1d8>
 80009e2:	2305      	movs	r3, #5
 80009e4:	e002      	b.n	80009ec <HAL_GPIO_Init+0x1d8>
 80009e6:	2301      	movs	r3, #1
 80009e8:	e000      	b.n	80009ec <HAL_GPIO_Init+0x1d8>
 80009ea:	2300      	movs	r3, #0
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	2103      	movs	r1, #3
 80009f0:	400a      	ands	r2, r1
 80009f2:	0092      	lsls	r2, r2, #2
 80009f4:	4093      	lsls	r3, r2
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009fc:	4935      	ldr	r1, [pc, #212]	; (8000ad4 <HAL_GPIO_Init+0x2c0>)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	089b      	lsrs	r3, r3, #2
 8000a02:	3302      	adds	r3, #2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a0a:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <HAL_GPIO_Init+0x2cc>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	43da      	mvns	r2, r3
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	4013      	ands	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685a      	ldr	r2, [r3, #4]
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	025b      	lsls	r3, r3, #9
 8000a22:	4013      	ands	r3, r2
 8000a24:	d003      	beq.n	8000a2e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <HAL_GPIO_Init+0x2cc>)
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000a34:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <HAL_GPIO_Init+0x2cc>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	43da      	mvns	r2, r3
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685a      	ldr	r2, [r3, #4]
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	029b      	lsls	r3, r3, #10
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	d003      	beq.n	8000a58 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a58:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <HAL_GPIO_Init+0x2cc>)
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a5e:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <HAL_GPIO_Init+0x2cc>)
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	43da      	mvns	r2, r3
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685a      	ldr	r2, [r3, #4]
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	035b      	lsls	r3, r3, #13
 8000a76:	4013      	ands	r3, r2
 8000a78:	d003      	beq.n	8000a82 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <HAL_GPIO_Init+0x2cc>)
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_GPIO_Init+0x2cc>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	43da      	mvns	r2, r3
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	039b      	lsls	r3, r3, #14
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	d003      	beq.n	8000aac <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HAL_GPIO_Init+0x2cc>)
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	40da      	lsrs	r2, r3
 8000ac0:	1e13      	subs	r3, r2, #0
 8000ac2:	d000      	beq.n	8000ac6 <HAL_GPIO_Init+0x2b2>
 8000ac4:	e6ae      	b.n	8000824 <HAL_GPIO_Init+0x10>
  } 
}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b006      	add	sp, #24
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40010000 	.word	0x40010000
 8000ad8:	48000400 	.word	0x48000400
 8000adc:	48000800 	.word	0x48000800
 8000ae0:	40010400 	.word	0x40010400

08000ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	0008      	movs	r0, r1
 8000aee:	0011      	movs	r1, r2
 8000af0:	1cbb      	adds	r3, r7, #2
 8000af2:	1c02      	adds	r2, r0, #0
 8000af4:	801a      	strh	r2, [r3, #0]
 8000af6:	1c7b      	adds	r3, r7, #1
 8000af8:	1c0a      	adds	r2, r1, #0
 8000afa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000afc:	1c7b      	adds	r3, r7, #1
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d004      	beq.n	8000b0e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b04:	1cbb      	adds	r3, r7, #2
 8000b06:	881a      	ldrh	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b0c:	e003      	b.n	8000b16 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b0e:	1cbb      	adds	r3, r7, #2
 8000b10:	881a      	ldrh	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	000a      	movs	r2, r1
 8000b28:	1cbb      	adds	r3, r7, #2
 8000b2a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b32:	1cbb      	adds	r3, r7, #2
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	041a      	lsls	r2, r3, #16
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	1cb9      	adds	r1, r7, #2
 8000b42:	8809      	ldrh	r1, [r1, #0]
 8000b44:	400b      	ands	r3, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	619a      	str	r2, [r3, #24]
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b004      	add	sp, #16
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	f000 fb76 	bl	8001254 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4013      	ands	r3, r2
 8000b70:	d100      	bne.n	8000b74 <HAL_RCC_OscConfig+0x20>
 8000b72:	e08e      	b.n	8000c92 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b74:	4bc5      	ldr	r3, [pc, #788]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	220c      	movs	r2, #12
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d00e      	beq.n	8000b9e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b80:	4bc2      	ldr	r3, [pc, #776]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	220c      	movs	r2, #12
 8000b86:	4013      	ands	r3, r2
 8000b88:	2b08      	cmp	r3, #8
 8000b8a:	d117      	bne.n	8000bbc <HAL_RCC_OscConfig+0x68>
 8000b8c:	4bbf      	ldr	r3, [pc, #764]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	23c0      	movs	r3, #192	; 0xc0
 8000b92:	025b      	lsls	r3, r3, #9
 8000b94:	401a      	ands	r2, r3
 8000b96:	2380      	movs	r3, #128	; 0x80
 8000b98:	025b      	lsls	r3, r3, #9
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d10e      	bne.n	8000bbc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b9e:	4bbb      	ldr	r3, [pc, #748]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	029b      	lsls	r3, r3, #10
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	d100      	bne.n	8000bac <HAL_RCC_OscConfig+0x58>
 8000baa:	e071      	b.n	8000c90 <HAL_RCC_OscConfig+0x13c>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d000      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x62>
 8000bb4:	e06c      	b.n	8000c90 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	f000 fb4c 	bl	8001254 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d107      	bne.n	8000bd4 <HAL_RCC_OscConfig+0x80>
 8000bc4:	4bb1      	ldr	r3, [pc, #708]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4bb0      	ldr	r3, [pc, #704]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	0249      	lsls	r1, r1, #9
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	e02f      	b.n	8000c34 <HAL_RCC_OscConfig+0xe0>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d10c      	bne.n	8000bf6 <HAL_RCC_OscConfig+0xa2>
 8000bdc:	4bab      	ldr	r3, [pc, #684]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4baa      	ldr	r3, [pc, #680]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000be2:	49ab      	ldr	r1, [pc, #684]	; (8000e90 <HAL_RCC_OscConfig+0x33c>)
 8000be4:	400a      	ands	r2, r1
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	4ba8      	ldr	r3, [pc, #672]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4ba7      	ldr	r3, [pc, #668]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000bee:	49a9      	ldr	r1, [pc, #676]	; (8000e94 <HAL_RCC_OscConfig+0x340>)
 8000bf0:	400a      	ands	r2, r1
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	e01e      	b.n	8000c34 <HAL_RCC_OscConfig+0xe0>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2b05      	cmp	r3, #5
 8000bfc:	d10e      	bne.n	8000c1c <HAL_RCC_OscConfig+0xc8>
 8000bfe:	4ba3      	ldr	r3, [pc, #652]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4ba2      	ldr	r3, [pc, #648]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	02c9      	lsls	r1, r1, #11
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	4b9f      	ldr	r3, [pc, #636]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b9e      	ldr	r3, [pc, #632]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000c12:	2180      	movs	r1, #128	; 0x80
 8000c14:	0249      	lsls	r1, r1, #9
 8000c16:	430a      	orrs	r2, r1
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	e00b      	b.n	8000c34 <HAL_RCC_OscConfig+0xe0>
 8000c1c:	4b9b      	ldr	r3, [pc, #620]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b9a      	ldr	r3, [pc, #616]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000c22:	499b      	ldr	r1, [pc, #620]	; (8000e90 <HAL_RCC_OscConfig+0x33c>)
 8000c24:	400a      	ands	r2, r1
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b97      	ldr	r3, [pc, #604]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000c2e:	4999      	ldr	r1, [pc, #612]	; (8000e94 <HAL_RCC_OscConfig+0x340>)
 8000c30:	400a      	ands	r2, r1
 8000c32:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d014      	beq.n	8000c66 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c3c:	f7ff fd08 	bl	8000650 <HAL_GetTick>
 8000c40:	0003      	movs	r3, r0
 8000c42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c44:	e008      	b.n	8000c58 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c46:	f7ff fd03 	bl	8000650 <HAL_GetTick>
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	2b64      	cmp	r3, #100	; 0x64
 8000c52:	d901      	bls.n	8000c58 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000c54:	2303      	movs	r3, #3
 8000c56:	e2fd      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c58:	4b8c      	ldr	r3, [pc, #560]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	029b      	lsls	r3, r3, #10
 8000c60:	4013      	ands	r3, r2
 8000c62:	d0f0      	beq.n	8000c46 <HAL_RCC_OscConfig+0xf2>
 8000c64:	e015      	b.n	8000c92 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c66:	f7ff fcf3 	bl	8000650 <HAL_GetTick>
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c6e:	e008      	b.n	8000c82 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c70:	f7ff fcee 	bl	8000650 <HAL_GetTick>
 8000c74:	0002      	movs	r2, r0
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b64      	cmp	r3, #100	; 0x64
 8000c7c:	d901      	bls.n	8000c82 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e2e8      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c82:	4b82      	ldr	r3, [pc, #520]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	029b      	lsls	r3, r3, #10
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	d1f0      	bne.n	8000c70 <HAL_RCC_OscConfig+0x11c>
 8000c8e:	e000      	b.n	8000c92 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c90:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2202      	movs	r2, #2
 8000c98:	4013      	ands	r3, r2
 8000c9a:	d100      	bne.n	8000c9e <HAL_RCC_OscConfig+0x14a>
 8000c9c:	e06c      	b.n	8000d78 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c9e:	4b7b      	ldr	r3, [pc, #492]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	d00e      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ca8:	4b78      	ldr	r3, [pc, #480]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	220c      	movs	r2, #12
 8000cae:	4013      	ands	r3, r2
 8000cb0:	2b08      	cmp	r3, #8
 8000cb2:	d11f      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x1a0>
 8000cb4:	4b75      	ldr	r3, [pc, #468]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	23c0      	movs	r3, #192	; 0xc0
 8000cba:	025b      	lsls	r3, r3, #9
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	021b      	lsls	r3, r3, #8
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d116      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc6:	4b71      	ldr	r3, [pc, #452]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2202      	movs	r2, #2
 8000ccc:	4013      	ands	r3, r2
 8000cce:	d005      	beq.n	8000cdc <HAL_RCC_OscConfig+0x188>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d001      	beq.n	8000cdc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e2bb      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cdc:	4b6b      	ldr	r3, [pc, #428]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	22f8      	movs	r2, #248	; 0xf8
 8000ce2:	4393      	bics	r3, r2
 8000ce4:	0019      	movs	r1, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	00da      	lsls	r2, r3, #3
 8000cec:	4b67      	ldr	r3, [pc, #412]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf2:	e041      	b.n	8000d78 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d024      	beq.n	8000d46 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cfc:	4b63      	ldr	r3, [pc, #396]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b62      	ldr	r3, [pc, #392]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000d02:	2101      	movs	r1, #1
 8000d04:	430a      	orrs	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fca2 	bl	8000650 <HAL_GetTick>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d10:	e008      	b.n	8000d24 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d12:	f7ff fc9d 	bl	8000650 <HAL_GetTick>
 8000d16:	0002      	movs	r2, r0
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d901      	bls.n	8000d24 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000d20:	2303      	movs	r3, #3
 8000d22:	e297      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d24:	4b59      	ldr	r3, [pc, #356]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2202      	movs	r2, #2
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d0f1      	beq.n	8000d12 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d2e:	4b57      	ldr	r3, [pc, #348]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	22f8      	movs	r2, #248	; 0xf8
 8000d34:	4393      	bics	r3, r2
 8000d36:	0019      	movs	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	00da      	lsls	r2, r3, #3
 8000d3e:	4b53      	ldr	r3, [pc, #332]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000d40:	430a      	orrs	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	e018      	b.n	8000d78 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d46:	4b51      	ldr	r3, [pc, #324]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4b50      	ldr	r3, [pc, #320]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	438a      	bics	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d52:	f7ff fc7d 	bl	8000650 <HAL_GetTick>
 8000d56:	0003      	movs	r3, r0
 8000d58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d5c:	f7ff fc78 	bl	8000650 <HAL_GetTick>
 8000d60:	0002      	movs	r2, r0
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e272      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6e:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2202      	movs	r2, #2
 8000d74:	4013      	ands	r3, r2
 8000d76:	d1f1      	bne.n	8000d5c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2208      	movs	r2, #8
 8000d7e:	4013      	ands	r3, r2
 8000d80:	d036      	beq.n	8000df0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d019      	beq.n	8000dbe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d8a:	4b40      	ldr	r3, [pc, #256]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000d8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d8e:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000d90:	2101      	movs	r1, #1
 8000d92:	430a      	orrs	r2, r1
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d96:	f7ff fc5b 	bl	8000650 <HAL_GetTick>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000da0:	f7ff fc56 	bl	8000650 <HAL_GetTick>
 8000da4:	0002      	movs	r2, r0
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e250      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db2:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	2202      	movs	r2, #2
 8000db8:	4013      	ands	r3, r2
 8000dba:	d0f1      	beq.n	8000da0 <HAL_RCC_OscConfig+0x24c>
 8000dbc:	e018      	b.n	8000df0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dbe:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000dc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dc2:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	438a      	bics	r2, r1
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dca:	f7ff fc41 	bl	8000650 <HAL_GetTick>
 8000dce:	0003      	movs	r3, r0
 8000dd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd4:	f7ff fc3c 	bl	8000650 <HAL_GetTick>
 8000dd8:	0002      	movs	r2, r0
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e236      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de6:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	2202      	movs	r2, #2
 8000dec:	4013      	ands	r3, r2
 8000dee:	d1f1      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2204      	movs	r2, #4
 8000df6:	4013      	ands	r3, r2
 8000df8:	d100      	bne.n	8000dfc <HAL_RCC_OscConfig+0x2a8>
 8000dfa:	e0b5      	b.n	8000f68 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dfc:	201f      	movs	r0, #31
 8000dfe:	183b      	adds	r3, r7, r0
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e04:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000e06:	69da      	ldr	r2, [r3, #28]
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	055b      	lsls	r3, r3, #21
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d110      	bne.n	8000e32 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000e12:	69da      	ldr	r2, [r3, #28]
 8000e14:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	0549      	lsls	r1, r1, #21
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	61da      	str	r2, [r3, #28]
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000e20:	69da      	ldr	r2, [r3, #28]
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	055b      	lsls	r3, r3, #21
 8000e26:	4013      	ands	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e2c:	183b      	adds	r3, r7, r0
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <HAL_RCC_OscConfig+0x344>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d11a      	bne.n	8000e74 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_RCC_OscConfig+0x344>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_RCC_OscConfig+0x344>)
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	0049      	lsls	r1, r1, #1
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e4c:	f7ff fc00 	bl	8000650 <HAL_GetTick>
 8000e50:	0003      	movs	r3, r0
 8000e52:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e54:	e008      	b.n	8000e68 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e56:	f7ff fbfb 	bl	8000650 <HAL_GetTick>
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b64      	cmp	r3, #100	; 0x64
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e1f5      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_RCC_OscConfig+0x344>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4013      	ands	r3, r2
 8000e72:	d0f0      	beq.n	8000e56 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d10f      	bne.n	8000e9c <HAL_RCC_OscConfig+0x348>
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000e7e:	6a1a      	ldr	r2, [r3, #32]
 8000e80:	4b02      	ldr	r3, [pc, #8]	; (8000e8c <HAL_RCC_OscConfig+0x338>)
 8000e82:	2101      	movs	r1, #1
 8000e84:	430a      	orrs	r2, r1
 8000e86:	621a      	str	r2, [r3, #32]
 8000e88:	e036      	b.n	8000ef8 <HAL_RCC_OscConfig+0x3a4>
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	fffeffff 	.word	0xfffeffff
 8000e94:	fffbffff 	.word	0xfffbffff
 8000e98:	40007000 	.word	0x40007000
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10c      	bne.n	8000ebe <HAL_RCC_OscConfig+0x36a>
 8000ea4:	4bca      	ldr	r3, [pc, #808]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000ea6:	6a1a      	ldr	r2, [r3, #32]
 8000ea8:	4bc9      	ldr	r3, [pc, #804]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000eaa:	2101      	movs	r1, #1
 8000eac:	438a      	bics	r2, r1
 8000eae:	621a      	str	r2, [r3, #32]
 8000eb0:	4bc7      	ldr	r3, [pc, #796]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000eb2:	6a1a      	ldr	r2, [r3, #32]
 8000eb4:	4bc6      	ldr	r3, [pc, #792]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	438a      	bics	r2, r1
 8000eba:	621a      	str	r2, [r3, #32]
 8000ebc:	e01c      	b.n	8000ef8 <HAL_RCC_OscConfig+0x3a4>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	2b05      	cmp	r3, #5
 8000ec4:	d10c      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x38c>
 8000ec6:	4bc2      	ldr	r3, [pc, #776]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000ec8:	6a1a      	ldr	r2, [r3, #32]
 8000eca:	4bc1      	ldr	r3, [pc, #772]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000ecc:	2104      	movs	r1, #4
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	621a      	str	r2, [r3, #32]
 8000ed2:	4bbf      	ldr	r3, [pc, #764]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000ed4:	6a1a      	ldr	r2, [r3, #32]
 8000ed6:	4bbe      	ldr	r3, [pc, #760]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	430a      	orrs	r2, r1
 8000edc:	621a      	str	r2, [r3, #32]
 8000ede:	e00b      	b.n	8000ef8 <HAL_RCC_OscConfig+0x3a4>
 8000ee0:	4bbb      	ldr	r3, [pc, #748]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000ee2:	6a1a      	ldr	r2, [r3, #32]
 8000ee4:	4bba      	ldr	r3, [pc, #744]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	438a      	bics	r2, r1
 8000eea:	621a      	str	r2, [r3, #32]
 8000eec:	4bb8      	ldr	r3, [pc, #736]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000eee:	6a1a      	ldr	r2, [r3, #32]
 8000ef0:	4bb7      	ldr	r3, [pc, #732]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	438a      	bics	r2, r1
 8000ef6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d014      	beq.n	8000f2a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f00:	f7ff fba6 	bl	8000650 <HAL_GetTick>
 8000f04:	0003      	movs	r3, r0
 8000f06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f08:	e009      	b.n	8000f1e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f0a:	f7ff fba1 	bl	8000650 <HAL_GetTick>
 8000f0e:	0002      	movs	r2, r0
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	4aaf      	ldr	r2, [pc, #700]	; (80011d4 <HAL_RCC_OscConfig+0x680>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e19a      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f1e:	4bac      	ldr	r3, [pc, #688]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	2202      	movs	r2, #2
 8000f24:	4013      	ands	r3, r2
 8000f26:	d0f0      	beq.n	8000f0a <HAL_RCC_OscConfig+0x3b6>
 8000f28:	e013      	b.n	8000f52 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2a:	f7ff fb91 	bl	8000650 <HAL_GetTick>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f32:	e009      	b.n	8000f48 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f34:	f7ff fb8c 	bl	8000650 <HAL_GetTick>
 8000f38:	0002      	movs	r2, r0
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	4aa5      	ldr	r2, [pc, #660]	; (80011d4 <HAL_RCC_OscConfig+0x680>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e185      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f48:	4ba1      	ldr	r3, [pc, #644]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d1f0      	bne.n	8000f34 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f52:	231f      	movs	r3, #31
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d105      	bne.n	8000f68 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f5c:	4b9c      	ldr	r3, [pc, #624]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000f5e:	69da      	ldr	r2, [r3, #28]
 8000f60:	4b9b      	ldr	r3, [pc, #620]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000f62:	499d      	ldr	r1, [pc, #628]	; (80011d8 <HAL_RCC_OscConfig+0x684>)
 8000f64:	400a      	ands	r2, r1
 8000f66:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d063      	beq.n	800103a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d12a      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f7a:	4b95      	ldr	r3, [pc, #596]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f7e:	4b94      	ldr	r3, [pc, #592]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000f80:	2104      	movs	r1, #4
 8000f82:	430a      	orrs	r2, r1
 8000f84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000f86:	4b92      	ldr	r3, [pc, #584]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f8a:	4b91      	ldr	r3, [pc, #580]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f92:	f7ff fb5d 	bl	8000650 <HAL_GetTick>
 8000f96:	0003      	movs	r3, r0
 8000f98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f9c:	f7ff fb58 	bl	8000650 <HAL_GetTick>
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e152      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fae:	4b88      	ldr	r3, [pc, #544]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d0f1      	beq.n	8000f9c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fb8:	4b85      	ldr	r3, [pc, #532]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fbc:	22f8      	movs	r2, #248	; 0xf8
 8000fbe:	4393      	bics	r3, r2
 8000fc0:	0019      	movs	r1, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	00da      	lsls	r2, r3, #3
 8000fc8:	4b81      	ldr	r3, [pc, #516]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	635a      	str	r2, [r3, #52]	; 0x34
 8000fce:	e034      	b.n	800103a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	3305      	adds	r3, #5
 8000fd6:	d111      	bne.n	8000ffc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000fd8:	4b7d      	ldr	r3, [pc, #500]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fdc:	4b7c      	ldr	r3, [pc, #496]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000fde:	2104      	movs	r1, #4
 8000fe0:	438a      	bics	r2, r1
 8000fe2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fe4:	4b7a      	ldr	r3, [pc, #488]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe8:	22f8      	movs	r2, #248	; 0xf8
 8000fea:	4393      	bics	r3, r2
 8000fec:	0019      	movs	r1, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	00da      	lsls	r2, r3, #3
 8000ff4:	4b76      	ldr	r3, [pc, #472]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	635a      	str	r2, [r3, #52]	; 0x34
 8000ffa:	e01e      	b.n	800103a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ffc:	4b74      	ldr	r3, [pc, #464]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8000ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001000:	4b73      	ldr	r3, [pc, #460]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8001002:	2104      	movs	r1, #4
 8001004:	430a      	orrs	r2, r1
 8001006:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001008:	4b71      	ldr	r3, [pc, #452]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 800100a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800100c:	4b70      	ldr	r3, [pc, #448]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 800100e:	2101      	movs	r1, #1
 8001010:	438a      	bics	r2, r1
 8001012:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001014:	f7ff fb1c 	bl	8000650 <HAL_GetTick>
 8001018:	0003      	movs	r3, r0
 800101a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800101e:	f7ff fb17 	bl	8000650 <HAL_GetTick>
 8001022:	0002      	movs	r2, r0
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e111      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001030:	4b67      	ldr	r3, [pc, #412]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8001032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001034:	2202      	movs	r2, #2
 8001036:	4013      	ands	r3, r2
 8001038:	d1f1      	bne.n	800101e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2220      	movs	r2, #32
 8001040:	4013      	ands	r3, r2
 8001042:	d05c      	beq.n	80010fe <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001044:	4b62      	ldr	r3, [pc, #392]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	220c      	movs	r2, #12
 800104a:	4013      	ands	r3, r2
 800104c:	2b0c      	cmp	r3, #12
 800104e:	d00e      	beq.n	800106e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001050:	4b5f      	ldr	r3, [pc, #380]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	220c      	movs	r2, #12
 8001056:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001058:	2b08      	cmp	r3, #8
 800105a:	d114      	bne.n	8001086 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800105c:	4b5c      	ldr	r3, [pc, #368]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	23c0      	movs	r3, #192	; 0xc0
 8001062:	025b      	lsls	r3, r3, #9
 8001064:	401a      	ands	r2, r3
 8001066:	23c0      	movs	r3, #192	; 0xc0
 8001068:	025b      	lsls	r3, r3, #9
 800106a:	429a      	cmp	r2, r3
 800106c:	d10b      	bne.n	8001086 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800106e:	4b58      	ldr	r3, [pc, #352]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8001070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	025b      	lsls	r3, r3, #9
 8001076:	4013      	ands	r3, r2
 8001078:	d040      	beq.n	80010fc <HAL_RCC_OscConfig+0x5a8>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d03c      	beq.n	80010fc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e0e6      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d01b      	beq.n	80010c6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800108e:	4b50      	ldr	r3, [pc, #320]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8001090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001092:	4b4f      	ldr	r3, [pc, #316]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	0249      	lsls	r1, r1, #9
 8001098:	430a      	orrs	r2, r1
 800109a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fad8 	bl	8000650 <HAL_GetTick>
 80010a0:	0003      	movs	r3, r0
 80010a2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010a6:	f7ff fad3 	bl	8000650 <HAL_GetTick>
 80010aa:	0002      	movs	r2, r0
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e0cd      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80010b8:	4b45      	ldr	r3, [pc, #276]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 80010ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	025b      	lsls	r3, r3, #9
 80010c0:	4013      	ands	r3, r2
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0x552>
 80010c4:	e01b      	b.n	80010fe <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80010c6:	4b42      	ldr	r3, [pc, #264]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 80010c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ca:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 80010cc:	4943      	ldr	r1, [pc, #268]	; (80011dc <HAL_RCC_OscConfig+0x688>)
 80010ce:	400a      	ands	r2, r1
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d2:	f7ff fabd 	bl	8000650 <HAL_GetTick>
 80010d6:	0003      	movs	r3, r0
 80010d8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010dc:	f7ff fab8 	bl	8000650 <HAL_GetTick>
 80010e0:	0002      	movs	r2, r0
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e0b2      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80010ee:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 80010f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	025b      	lsls	r3, r3, #9
 80010f6:	4013      	ands	r3, r2
 80010f8:	d1f0      	bne.n	80010dc <HAL_RCC_OscConfig+0x588>
 80010fa:	e000      	b.n	80010fe <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80010fc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	2b00      	cmp	r3, #0
 8001104:	d100      	bne.n	8001108 <HAL_RCC_OscConfig+0x5b4>
 8001106:	e0a4      	b.n	8001252 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	220c      	movs	r2, #12
 800110e:	4013      	ands	r3, r2
 8001110:	2b08      	cmp	r3, #8
 8001112:	d100      	bne.n	8001116 <HAL_RCC_OscConfig+0x5c2>
 8001114:	e078      	b.n	8001208 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	2b02      	cmp	r3, #2
 800111c:	d14c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800111e:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8001124:	492e      	ldr	r1, [pc, #184]	; (80011e0 <HAL_RCC_OscConfig+0x68c>)
 8001126:	400a      	ands	r2, r1
 8001128:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112a:	f7ff fa91 	bl	8000650 <HAL_GetTick>
 800112e:	0003      	movs	r3, r0
 8001130:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001134:	f7ff fa8c 	bl	8000650 <HAL_GetTick>
 8001138:	0002      	movs	r2, r0
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e086      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001146:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	049b      	lsls	r3, r3, #18
 800114e:	4013      	ands	r3, r2
 8001150:	d1f0      	bne.n	8001134 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8001154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001156:	220f      	movs	r2, #15
 8001158:	4393      	bics	r3, r2
 800115a:	0019      	movs	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8001162:	430a      	orrs	r2, r1
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
 8001166:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <HAL_RCC_OscConfig+0x690>)
 800116c:	4013      	ands	r3, r2
 800116e:	0019      	movs	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001178:	431a      	orrs	r2, r3
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 800117c:	430a      	orrs	r2, r1
 800117e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 8001186:	2180      	movs	r1, #128	; 0x80
 8001188:	0449      	lsls	r1, r1, #17
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118e:	f7ff fa5f 	bl	8000650 <HAL_GetTick>
 8001192:	0003      	movs	r3, r0
 8001194:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001198:	f7ff fa5a 	bl	8000650 <HAL_GetTick>
 800119c:	0002      	movs	r2, r0
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e054      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	049b      	lsls	r3, r3, #18
 80011b2:	4013      	ands	r3, r2
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x644>
 80011b6:	e04c      	b.n	8001252 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <HAL_RCC_OscConfig+0x67c>)
 80011be:	4908      	ldr	r1, [pc, #32]	; (80011e0 <HAL_RCC_OscConfig+0x68c>)
 80011c0:	400a      	ands	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fa44 	bl	8000650 <HAL_GetTick>
 80011c8:	0003      	movs	r3, r0
 80011ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011cc:	e015      	b.n	80011fa <HAL_RCC_OscConfig+0x6a6>
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	40021000 	.word	0x40021000
 80011d4:	00001388 	.word	0x00001388
 80011d8:	efffffff 	.word	0xefffffff
 80011dc:	fffeffff 	.word	0xfffeffff
 80011e0:	feffffff 	.word	0xfeffffff
 80011e4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011e8:	f7ff fa32 	bl	8000650 <HAL_GetTick>
 80011ec:	0002      	movs	r2, r0
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e02c      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_RCC_OscConfig+0x708>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	049b      	lsls	r3, r3, #18
 8001202:	4013      	ands	r3, r2
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x694>
 8001206:	e024      	b.n	8001252 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e01f      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_RCC_OscConfig+0x708>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_RCC_OscConfig+0x708>)
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	23c0      	movs	r3, #192	; 0xc0
 8001224:	025b      	lsls	r3, r3, #9
 8001226:	401a      	ands	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	429a      	cmp	r2, r3
 800122e:	d10e      	bne.n	800124e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	220f      	movs	r2, #15
 8001234:	401a      	ands	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800123a:	429a      	cmp	r2, r3
 800123c:	d107      	bne.n	800124e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	23f0      	movs	r3, #240	; 0xf0
 8001242:	039b      	lsls	r3, r3, #14
 8001244:	401a      	ands	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800124a:	429a      	cmp	r2, r3
 800124c:	d001      	beq.n	8001252 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	0018      	movs	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	b008      	add	sp, #32
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e0bf      	b.n	80013f4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001274:	4b61      	ldr	r3, [pc, #388]	; (80013fc <HAL_RCC_ClockConfig+0x19c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2201      	movs	r2, #1
 800127a:	4013      	ands	r3, r2
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d911      	bls.n	80012a6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001282:	4b5e      	ldr	r3, [pc, #376]	; (80013fc <HAL_RCC_ClockConfig+0x19c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2201      	movs	r2, #1
 8001288:	4393      	bics	r3, r2
 800128a:	0019      	movs	r1, r3
 800128c:	4b5b      	ldr	r3, [pc, #364]	; (80013fc <HAL_RCC_ClockConfig+0x19c>)
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001294:	4b59      	ldr	r3, [pc, #356]	; (80013fc <HAL_RCC_ClockConfig+0x19c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2201      	movs	r2, #1
 800129a:	4013      	ands	r3, r2
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d001      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e0a6      	b.n	80013f4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2202      	movs	r2, #2
 80012ac:	4013      	ands	r3, r2
 80012ae:	d015      	beq.n	80012dc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2204      	movs	r2, #4
 80012b6:	4013      	ands	r3, r2
 80012b8:	d006      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012ba:	4b51      	ldr	r3, [pc, #324]	; (8001400 <HAL_RCC_ClockConfig+0x1a0>)
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4b50      	ldr	r3, [pc, #320]	; (8001400 <HAL_RCC_ClockConfig+0x1a0>)
 80012c0:	21e0      	movs	r1, #224	; 0xe0
 80012c2:	00c9      	lsls	r1, r1, #3
 80012c4:	430a      	orrs	r2, r1
 80012c6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c8:	4b4d      	ldr	r3, [pc, #308]	; (8001400 <HAL_RCC_ClockConfig+0x1a0>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	22f0      	movs	r2, #240	; 0xf0
 80012ce:	4393      	bics	r3, r2
 80012d0:	0019      	movs	r1, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	4b4a      	ldr	r3, [pc, #296]	; (8001400 <HAL_RCC_ClockConfig+0x1a0>)
 80012d8:	430a      	orrs	r2, r1
 80012da:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2201      	movs	r2, #1
 80012e2:	4013      	ands	r3, r2
 80012e4:	d04c      	beq.n	8001380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d107      	bne.n	80012fe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	4b44      	ldr	r3, [pc, #272]	; (8001400 <HAL_RCC_ClockConfig+0x1a0>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	029b      	lsls	r3, r3, #10
 80012f6:	4013      	ands	r3, r2
 80012f8:	d120      	bne.n	800133c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e07a      	b.n	80013f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d107      	bne.n	8001316 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001306:	4b3e      	ldr	r3, [pc, #248]	; (8001400 <HAL_RCC_ClockConfig+0x1a0>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	049b      	lsls	r3, r3, #18
 800130e:	4013      	ands	r3, r2
 8001310:	d114      	bne.n	800133c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e06e      	b.n	80013f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d107      	bne.n	800132e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800131e:	4b38      	ldr	r3, [pc, #224]	; (8001400 <HAL_RCC_ClockConfig+0x1a0>)
 8001320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	025b      	lsls	r3, r3, #9
 8001326:	4013      	ands	r3, r2
 8001328:	d108      	bne.n	800133c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e062      	b.n	80013f4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132e:	4b34      	ldr	r3, [pc, #208]	; (8001400 <HAL_RCC_ClockConfig+0x1a0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2202      	movs	r2, #2
 8001334:	4013      	ands	r3, r2
 8001336:	d101      	bne.n	800133c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e05b      	b.n	80013f4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133c:	4b30      	ldr	r3, [pc, #192]	; (8001400 <HAL_RCC_ClockConfig+0x1a0>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2203      	movs	r2, #3
 8001342:	4393      	bics	r3, r2
 8001344:	0019      	movs	r1, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <HAL_RCC_ClockConfig+0x1a0>)
 800134c:	430a      	orrs	r2, r1
 800134e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001350:	f7ff f97e 	bl	8000650 <HAL_GetTick>
 8001354:	0003      	movs	r3, r0
 8001356:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001358:	e009      	b.n	800136e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800135a:	f7ff f979 	bl	8000650 <HAL_GetTick>
 800135e:	0002      	movs	r2, r0
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <HAL_RCC_ClockConfig+0x1a4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d901      	bls.n	800136e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e042      	b.n	80013f4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <HAL_RCC_ClockConfig+0x1a0>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	220c      	movs	r2, #12
 8001374:	401a      	ands	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	429a      	cmp	r2, r3
 800137e:	d1ec      	bne.n	800135a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <HAL_RCC_ClockConfig+0x19c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	4013      	ands	r3, r2
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d211      	bcs.n	80013b2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_RCC_ClockConfig+0x19c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2201      	movs	r2, #1
 8001394:	4393      	bics	r3, r2
 8001396:	0019      	movs	r1, r3
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_RCC_ClockConfig+0x19c>)
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_RCC_ClockConfig+0x19c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2201      	movs	r2, #1
 80013a6:	4013      	ands	r3, r2
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e020      	b.n	80013f4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2204      	movs	r2, #4
 80013b8:	4013      	ands	r3, r2
 80013ba:	d009      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <HAL_RCC_ClockConfig+0x1a0>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <HAL_RCC_ClockConfig+0x1a8>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	0019      	movs	r1, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <HAL_RCC_ClockConfig+0x1a0>)
 80013cc:	430a      	orrs	r2, r1
 80013ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013d0:	f000 f820 	bl	8001414 <HAL_RCC_GetSysClockFreq>
 80013d4:	0001      	movs	r1, r0
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_RCC_ClockConfig+0x1a0>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	220f      	movs	r2, #15
 80013de:	4013      	ands	r3, r2
 80013e0:	4a0a      	ldr	r2, [pc, #40]	; (800140c <HAL_RCC_ClockConfig+0x1ac>)
 80013e2:	5cd3      	ldrb	r3, [r2, r3]
 80013e4:	000a      	movs	r2, r1
 80013e6:	40da      	lsrs	r2, r3
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_RCC_ClockConfig+0x1b0>)
 80013ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013ec:	2000      	movs	r0, #0
 80013ee:	f7ff f8e9 	bl	80005c4 <HAL_InitTick>
  
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	0018      	movs	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b004      	add	sp, #16
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40022000 	.word	0x40022000
 8001400:	40021000 	.word	0x40021000
 8001404:	00001388 	.word	0x00001388
 8001408:	fffff8ff 	.word	0xfffff8ff
 800140c:	08001c8c 	.word	0x08001c8c
 8001410:	20000000 	.word	0x20000000

08001414 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b08f      	sub	sp, #60	; 0x3c
 8001418:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800141a:	2314      	movs	r3, #20
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	4a38      	ldr	r2, [pc, #224]	; (8001500 <HAL_RCC_GetSysClockFreq+0xec>)
 8001420:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001422:	c313      	stmia	r3!, {r0, r1, r4}
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4a36      	ldr	r2, [pc, #216]	; (8001504 <HAL_RCC_GetSysClockFreq+0xf0>)
 800142c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800142e:	c313      	stmia	r3!, {r0, r1, r4}
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001438:	2300      	movs	r3, #0
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
 800143c:	2300      	movs	r3, #0
 800143e:	637b      	str	r3, [r7, #52]	; 0x34
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001448:	4b2f      	ldr	r3, [pc, #188]	; (8001508 <HAL_RCC_GetSysClockFreq+0xf4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800144e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001450:	220c      	movs	r2, #12
 8001452:	4013      	ands	r3, r2
 8001454:	2b0c      	cmp	r3, #12
 8001456:	d047      	beq.n	80014e8 <HAL_RCC_GetSysClockFreq+0xd4>
 8001458:	d849      	bhi.n	80014ee <HAL_RCC_GetSysClockFreq+0xda>
 800145a:	2b04      	cmp	r3, #4
 800145c:	d002      	beq.n	8001464 <HAL_RCC_GetSysClockFreq+0x50>
 800145e:	2b08      	cmp	r3, #8
 8001460:	d003      	beq.n	800146a <HAL_RCC_GetSysClockFreq+0x56>
 8001462:	e044      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001464:	4b29      	ldr	r3, [pc, #164]	; (800150c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001466:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001468:	e044      	b.n	80014f4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800146a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146c:	0c9b      	lsrs	r3, r3, #18
 800146e:	220f      	movs	r2, #15
 8001470:	4013      	ands	r3, r2
 8001472:	2214      	movs	r2, #20
 8001474:	18ba      	adds	r2, r7, r2
 8001476:	5cd3      	ldrb	r3, [r2, r3]
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800147a:	4b23      	ldr	r3, [pc, #140]	; (8001508 <HAL_RCC_GetSysClockFreq+0xf4>)
 800147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147e:	220f      	movs	r2, #15
 8001480:	4013      	ands	r3, r2
 8001482:	1d3a      	adds	r2, r7, #4
 8001484:	5cd3      	ldrb	r3, [r2, r3]
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800148a:	23c0      	movs	r3, #192	; 0xc0
 800148c:	025b      	lsls	r3, r3, #9
 800148e:	401a      	ands	r2, r3
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	025b      	lsls	r3, r3, #9
 8001494:	429a      	cmp	r2, r3
 8001496:	d109      	bne.n	80014ac <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800149a:	481c      	ldr	r0, [pc, #112]	; (800150c <HAL_RCC_GetSysClockFreq+0xf8>)
 800149c:	f7fe fe34 	bl	8000108 <__udivsi3>
 80014a0:	0003      	movs	r3, r0
 80014a2:	001a      	movs	r2, r3
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	4353      	muls	r3, r2
 80014a8:	637b      	str	r3, [r7, #52]	; 0x34
 80014aa:	e01a      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80014ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014ae:	23c0      	movs	r3, #192	; 0xc0
 80014b0:	025b      	lsls	r3, r3, #9
 80014b2:	401a      	ands	r2, r3
 80014b4:	23c0      	movs	r3, #192	; 0xc0
 80014b6:	025b      	lsls	r3, r3, #9
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d109      	bne.n	80014d0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014be:	4814      	ldr	r0, [pc, #80]	; (8001510 <HAL_RCC_GetSysClockFreq+0xfc>)
 80014c0:	f7fe fe22 	bl	8000108 <__udivsi3>
 80014c4:	0003      	movs	r3, r0
 80014c6:	001a      	movs	r2, r3
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	4353      	muls	r3, r2
 80014cc:	637b      	str	r3, [r7, #52]	; 0x34
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014d2:	480e      	ldr	r0, [pc, #56]	; (800150c <HAL_RCC_GetSysClockFreq+0xf8>)
 80014d4:	f7fe fe18 	bl	8000108 <__udivsi3>
 80014d8:	0003      	movs	r3, r0
 80014da:	001a      	movs	r2, r3
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	4353      	muls	r3, r2
 80014e0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80014e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014e6:	e005      	b.n	80014f4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_GetSysClockFreq+0xfc>)
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014ec:	e002      	b.n	80014f4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <HAL_RCC_GetSysClockFreq+0xf8>)
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014f2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80014f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80014f6:	0018      	movs	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b00f      	add	sp, #60	; 0x3c
 80014fc:	bd90      	pop	{r4, r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	08001c6c 	.word	0x08001c6c
 8001504:	08001c7c 	.word	0x08001c7c
 8001508:	40021000 	.word	0x40021000
 800150c:	007a1200 	.word	0x007a1200
 8001510:	02dc6c00 	.word	0x02dc6c00

08001514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001518:	4b02      	ldr	r3, [pc, #8]	; (8001524 <HAL_RCC_GetHCLKFreq+0x10>)
 800151a:	681b      	ldr	r3, [r3, #0]
}
 800151c:	0018      	movs	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	20000000 	.word	0x20000000

08001528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800152c:	f7ff fff2 	bl	8001514 <HAL_RCC_GetHCLKFreq>
 8001530:	0001      	movs	r1, r0
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	2207      	movs	r2, #7
 800153a:	4013      	ands	r3, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800153e:	5cd3      	ldrb	r3, [r2, r3]
 8001540:	40d9      	lsrs	r1, r3
 8001542:	000b      	movs	r3, r1
}    
 8001544:	0018      	movs	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	40021000 	.word	0x40021000
 8001550:	08001c9c 	.word	0x08001c9c

08001554 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e044      	b.n	80015f0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800156a:	2b00      	cmp	r3, #0
 800156c:	d107      	bne.n	800157e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2274      	movs	r2, #116	; 0x74
 8001572:	2100      	movs	r1, #0
 8001574:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	0018      	movs	r0, r3
 800157a:	f7fe ff63 	bl	8000444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2224      	movs	r2, #36	; 0x24
 8001582:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2101      	movs	r1, #1
 8001590:	438a      	bics	r2, r1
 8001592:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	0018      	movs	r0, r3
 8001598:	f000 f830 	bl	80015fc <UART_SetConfig>
 800159c:	0003      	movs	r3, r0
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e024      	b.n	80015f0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	0018      	movs	r0, r3
 80015b2:	f000 f963 	bl	800187c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	490d      	ldr	r1, [pc, #52]	; (80015f8 <HAL_UART_Init+0xa4>)
 80015c2:	400a      	ands	r2, r1
 80015c4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	212a      	movs	r1, #42	; 0x2a
 80015d2:	438a      	bics	r2, r1
 80015d4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2101      	movs	r1, #1
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	0018      	movs	r0, r3
 80015ea:	f000 f9fb 	bl	80019e4 <UART_CheckIdleState>
 80015ee:	0003      	movs	r3, r0
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b002      	add	sp, #8
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	ffffb7ff 	.word	0xffffb7ff

080015fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001604:	231e      	movs	r3, #30
 8001606:	18fb      	adds	r3, r7, r3
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	4313      	orrs	r3, r2
 8001622:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a8d      	ldr	r2, [pc, #564]	; (8001860 <UART_SetConfig+0x264>)
 800162c:	4013      	ands	r3, r2
 800162e:	0019      	movs	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4a88      	ldr	r2, [pc, #544]	; (8001864 <UART_SetConfig+0x268>)
 8001642:	4013      	ands	r3, r2
 8001644:	0019      	movs	r1, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	4313      	orrs	r3, r2
 8001660:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	4a7f      	ldr	r2, [pc, #508]	; (8001868 <UART_SetConfig+0x26c>)
 800166a:	4013      	ands	r3, r2
 800166c:	0019      	movs	r1, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	430a      	orrs	r2, r1
 8001676:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a7b      	ldr	r2, [pc, #492]	; (800186c <UART_SetConfig+0x270>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d127      	bne.n	80016d2 <UART_SetConfig+0xd6>
 8001682:	4b7b      	ldr	r3, [pc, #492]	; (8001870 <UART_SetConfig+0x274>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	2203      	movs	r2, #3
 8001688:	4013      	ands	r3, r2
 800168a:	2b03      	cmp	r3, #3
 800168c:	d00d      	beq.n	80016aa <UART_SetConfig+0xae>
 800168e:	d81b      	bhi.n	80016c8 <UART_SetConfig+0xcc>
 8001690:	2b02      	cmp	r3, #2
 8001692:	d014      	beq.n	80016be <UART_SetConfig+0xc2>
 8001694:	d818      	bhi.n	80016c8 <UART_SetConfig+0xcc>
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <UART_SetConfig+0xa4>
 800169a:	2b01      	cmp	r3, #1
 800169c:	d00a      	beq.n	80016b4 <UART_SetConfig+0xb8>
 800169e:	e013      	b.n	80016c8 <UART_SetConfig+0xcc>
 80016a0:	231f      	movs	r3, #31
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
 80016a8:	e021      	b.n	80016ee <UART_SetConfig+0xf2>
 80016aa:	231f      	movs	r3, #31
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	2202      	movs	r2, #2
 80016b0:	701a      	strb	r2, [r3, #0]
 80016b2:	e01c      	b.n	80016ee <UART_SetConfig+0xf2>
 80016b4:	231f      	movs	r3, #31
 80016b6:	18fb      	adds	r3, r7, r3
 80016b8:	2204      	movs	r2, #4
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	e017      	b.n	80016ee <UART_SetConfig+0xf2>
 80016be:	231f      	movs	r3, #31
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	2208      	movs	r2, #8
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	e012      	b.n	80016ee <UART_SetConfig+0xf2>
 80016c8:	231f      	movs	r3, #31
 80016ca:	18fb      	adds	r3, r7, r3
 80016cc:	2210      	movs	r2, #16
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e00d      	b.n	80016ee <UART_SetConfig+0xf2>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a67      	ldr	r2, [pc, #412]	; (8001874 <UART_SetConfig+0x278>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d104      	bne.n	80016e6 <UART_SetConfig+0xea>
 80016dc:	231f      	movs	r3, #31
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
 80016e4:	e003      	b.n	80016ee <UART_SetConfig+0xf2>
 80016e6:	231f      	movs	r3, #31
 80016e8:	18fb      	adds	r3, r7, r3
 80016ea:	2210      	movs	r2, #16
 80016ec:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69da      	ldr	r2, [r3, #28]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d15d      	bne.n	80017b6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80016fa:	231f      	movs	r3, #31
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b08      	cmp	r3, #8
 8001702:	d015      	beq.n	8001730 <UART_SetConfig+0x134>
 8001704:	dc18      	bgt.n	8001738 <UART_SetConfig+0x13c>
 8001706:	2b04      	cmp	r3, #4
 8001708:	d00d      	beq.n	8001726 <UART_SetConfig+0x12a>
 800170a:	dc15      	bgt.n	8001738 <UART_SetConfig+0x13c>
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <UART_SetConfig+0x11a>
 8001710:	2b02      	cmp	r3, #2
 8001712:	d005      	beq.n	8001720 <UART_SetConfig+0x124>
 8001714:	e010      	b.n	8001738 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001716:	f7ff ff07 	bl	8001528 <HAL_RCC_GetPCLK1Freq>
 800171a:	0003      	movs	r3, r0
 800171c:	61bb      	str	r3, [r7, #24]
        break;
 800171e:	e012      	b.n	8001746 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001720:	4b55      	ldr	r3, [pc, #340]	; (8001878 <UART_SetConfig+0x27c>)
 8001722:	61bb      	str	r3, [r7, #24]
        break;
 8001724:	e00f      	b.n	8001746 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001726:	f7ff fe75 	bl	8001414 <HAL_RCC_GetSysClockFreq>
 800172a:	0003      	movs	r3, r0
 800172c:	61bb      	str	r3, [r7, #24]
        break;
 800172e:	e00a      	b.n	8001746 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	61bb      	str	r3, [r7, #24]
        break;
 8001736:	e006      	b.n	8001746 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800173c:	231e      	movs	r3, #30
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
        break;
 8001744:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d100      	bne.n	800174e <UART_SetConfig+0x152>
 800174c:	e07b      	b.n	8001846 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	005a      	lsls	r2, r3, #1
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	085b      	lsrs	r3, r3, #1
 8001758:	18d2      	adds	r2, r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	0019      	movs	r1, r3
 8001760:	0010      	movs	r0, r2
 8001762:	f7fe fcd1 	bl	8000108 <__udivsi3>
 8001766:	0003      	movs	r3, r0
 8001768:	b29b      	uxth	r3, r3
 800176a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	2b0f      	cmp	r3, #15
 8001770:	d91c      	bls.n	80017ac <UART_SetConfig+0x1b0>
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	025b      	lsls	r3, r3, #9
 8001778:	429a      	cmp	r2, r3
 800177a:	d217      	bcs.n	80017ac <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	b29a      	uxth	r2, r3
 8001780:	200e      	movs	r0, #14
 8001782:	183b      	adds	r3, r7, r0
 8001784:	210f      	movs	r1, #15
 8001786:	438a      	bics	r2, r1
 8001788:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	085b      	lsrs	r3, r3, #1
 800178e:	b29b      	uxth	r3, r3
 8001790:	2207      	movs	r2, #7
 8001792:	4013      	ands	r3, r2
 8001794:	b299      	uxth	r1, r3
 8001796:	183b      	adds	r3, r7, r0
 8001798:	183a      	adds	r2, r7, r0
 800179a:	8812      	ldrh	r2, [r2, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	183a      	adds	r2, r7, r0
 80017a6:	8812      	ldrh	r2, [r2, #0]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	e04c      	b.n	8001846 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80017ac:	231e      	movs	r3, #30
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e047      	b.n	8001846 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80017b6:	231f      	movs	r3, #31
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d015      	beq.n	80017ec <UART_SetConfig+0x1f0>
 80017c0:	dc18      	bgt.n	80017f4 <UART_SetConfig+0x1f8>
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d00d      	beq.n	80017e2 <UART_SetConfig+0x1e6>
 80017c6:	dc15      	bgt.n	80017f4 <UART_SetConfig+0x1f8>
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <UART_SetConfig+0x1d6>
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d005      	beq.n	80017dc <UART_SetConfig+0x1e0>
 80017d0:	e010      	b.n	80017f4 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80017d2:	f7ff fea9 	bl	8001528 <HAL_RCC_GetPCLK1Freq>
 80017d6:	0003      	movs	r3, r0
 80017d8:	61bb      	str	r3, [r7, #24]
        break;
 80017da:	e012      	b.n	8001802 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80017dc:	4b26      	ldr	r3, [pc, #152]	; (8001878 <UART_SetConfig+0x27c>)
 80017de:	61bb      	str	r3, [r7, #24]
        break;
 80017e0:	e00f      	b.n	8001802 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80017e2:	f7ff fe17 	bl	8001414 <HAL_RCC_GetSysClockFreq>
 80017e6:	0003      	movs	r3, r0
 80017e8:	61bb      	str	r3, [r7, #24]
        break;
 80017ea:	e00a      	b.n	8001802 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	61bb      	str	r3, [r7, #24]
        break;
 80017f2:	e006      	b.n	8001802 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80017f8:	231e      	movs	r3, #30
 80017fa:	18fb      	adds	r3, r7, r3
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
        break;
 8001800:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d01e      	beq.n	8001846 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	085a      	lsrs	r2, r3, #1
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	18d2      	adds	r2, r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	0019      	movs	r1, r3
 8001818:	0010      	movs	r0, r2
 800181a:	f7fe fc75 	bl	8000108 <__udivsi3>
 800181e:	0003      	movs	r3, r0
 8001820:	b29b      	uxth	r3, r3
 8001822:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	2b0f      	cmp	r3, #15
 8001828:	d909      	bls.n	800183e <UART_SetConfig+0x242>
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	025b      	lsls	r3, r3, #9
 8001830:	429a      	cmp	r2, r3
 8001832:	d204      	bcs.n	800183e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	e003      	b.n	8001846 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800183e:	231e      	movs	r3, #30
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001852:	231e      	movs	r3, #30
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	781b      	ldrb	r3, [r3, #0]
}
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	b008      	add	sp, #32
 800185e:	bd80      	pop	{r7, pc}
 8001860:	efff69f3 	.word	0xefff69f3
 8001864:	ffffcfff 	.word	0xffffcfff
 8001868:	fffff4ff 	.word	0xfffff4ff
 800186c:	40013800 	.word	0x40013800
 8001870:	40021000 	.word	0x40021000
 8001874:	40004400 	.word	0x40004400
 8001878:	007a1200 	.word	0x007a1200

0800187c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	2201      	movs	r2, #1
 800188a:	4013      	ands	r3, r2
 800188c:	d00b      	beq.n	80018a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a4a      	ldr	r2, [pc, #296]	; (80019c0 <UART_AdvFeatureConfig+0x144>)
 8001896:	4013      	ands	r3, r2
 8001898:	0019      	movs	r1, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	2202      	movs	r2, #2
 80018ac:	4013      	ands	r3, r2
 80018ae:	d00b      	beq.n	80018c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4a43      	ldr	r2, [pc, #268]	; (80019c4 <UART_AdvFeatureConfig+0x148>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	2204      	movs	r2, #4
 80018ce:	4013      	ands	r3, r2
 80018d0:	d00b      	beq.n	80018ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <UART_AdvFeatureConfig+0x14c>)
 80018da:	4013      	ands	r3, r2
 80018dc:	0019      	movs	r1, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	2208      	movs	r2, #8
 80018f0:	4013      	ands	r3, r2
 80018f2:	d00b      	beq.n	800190c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4a34      	ldr	r2, [pc, #208]	; (80019cc <UART_AdvFeatureConfig+0x150>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	0019      	movs	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	2210      	movs	r2, #16
 8001912:	4013      	ands	r3, r2
 8001914:	d00b      	beq.n	800192e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4a2c      	ldr	r2, [pc, #176]	; (80019d0 <UART_AdvFeatureConfig+0x154>)
 800191e:	4013      	ands	r3, r2
 8001920:	0019      	movs	r1, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	2220      	movs	r2, #32
 8001934:	4013      	ands	r3, r2
 8001936:	d00b      	beq.n	8001950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	4a25      	ldr	r2, [pc, #148]	; (80019d4 <UART_AdvFeatureConfig+0x158>)
 8001940:	4013      	ands	r3, r2
 8001942:	0019      	movs	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	2240      	movs	r2, #64	; 0x40
 8001956:	4013      	ands	r3, r2
 8001958:	d01d      	beq.n	8001996 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a1d      	ldr	r2, [pc, #116]	; (80019d8 <UART_AdvFeatureConfig+0x15c>)
 8001962:	4013      	ands	r3, r2
 8001964:	0019      	movs	r1, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	035b      	lsls	r3, r3, #13
 800197a:	429a      	cmp	r2, r3
 800197c:	d10b      	bne.n	8001996 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4a15      	ldr	r2, [pc, #84]	; (80019dc <UART_AdvFeatureConfig+0x160>)
 8001986:	4013      	ands	r3, r2
 8001988:	0019      	movs	r1, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	2280      	movs	r2, #128	; 0x80
 800199c:	4013      	ands	r3, r2
 800199e:	d00b      	beq.n	80019b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <UART_AdvFeatureConfig+0x164>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	0019      	movs	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	605a      	str	r2, [r3, #4]
  }
}
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b002      	add	sp, #8
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	fffdffff 	.word	0xfffdffff
 80019c4:	fffeffff 	.word	0xfffeffff
 80019c8:	fffbffff 	.word	0xfffbffff
 80019cc:	ffff7fff 	.word	0xffff7fff
 80019d0:	ffffefff 	.word	0xffffefff
 80019d4:	ffffdfff 	.word	0xffffdfff
 80019d8:	ffefffff 	.word	0xffefffff
 80019dc:	ff9fffff 	.word	0xff9fffff
 80019e0:	fff7ffff 	.word	0xfff7ffff

080019e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2280      	movs	r2, #128	; 0x80
 80019f0:	2100      	movs	r1, #0
 80019f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80019f4:	f7fe fe2c 	bl	8000650 <HAL_GetTick>
 80019f8:	0003      	movs	r3, r0
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2208      	movs	r2, #8
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d10c      	bne.n	8001a24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	0391      	lsls	r1, r2, #14
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <UART_CheckIdleState+0x8c>)
 8001a14:	9200      	str	r2, [sp, #0]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f000 f82c 	bl	8001a74 <UART_WaitOnFlagUntilTimeout>
 8001a1c:	1e03      	subs	r3, r0, #0
 8001a1e:	d001      	beq.n	8001a24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e021      	b.n	8001a68 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d10c      	bne.n	8001a4c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	03d1      	lsls	r1, r2, #15
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <UART_CheckIdleState+0x8c>)
 8001a3c:	9200      	str	r2, [sp, #0]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f000 f818 	bl	8001a74 <UART_WaitOnFlagUntilTimeout>
 8001a44:	1e03      	subs	r3, r0, #0
 8001a46:	d001      	beq.n	8001a4c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e00d      	b.n	8001a68 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2220      	movs	r2, #32
 8001a56:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2274      	movs	r2, #116	; 0x74
 8001a62:	2100      	movs	r1, #0
 8001a64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b004      	add	sp, #16
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	01ffffff 	.word	0x01ffffff

08001a74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b094      	sub	sp, #80	; 0x50
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	1dfb      	adds	r3, r7, #7
 8001a82:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a84:	e0a3      	b.n	8001bce <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a88:	3301      	adds	r3, #1
 8001a8a:	d100      	bne.n	8001a8e <UART_WaitOnFlagUntilTimeout+0x1a>
 8001a8c:	e09f      	b.n	8001bce <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a8e:	f7fe fddf 	bl	8000650 <HAL_GetTick>
 8001a92:	0002      	movs	r2, r0
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d302      	bcc.n	8001aa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d13d      	bne.n	8001b20 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8001aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001aac:	647b      	str	r3, [r7, #68]	; 0x44
 8001aae:	2301      	movs	r3, #1
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab4:	f383 8810 	msr	PRIMASK, r3
}
 8001ab8:	46c0      	nop			; (mov r8, r8)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	494c      	ldr	r1, [pc, #304]	; (8001bf8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8001ac6:	400a      	ands	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad0:	f383 8810 	msr	PRIMASK, r3
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8001ada:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ade:	643b      	str	r3, [r7, #64]	; 0x40
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae6:	f383 8810 	msr	PRIMASK, r3
}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2101      	movs	r1, #1
 8001af8:	438a      	bics	r2, r1
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b02:	f383 8810 	msr	PRIMASK, r3
}
 8001b06:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2220      	movs	r2, #32
 8001b12:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2274      	movs	r2, #116	; 0x74
 8001b18:	2100      	movs	r1, #0
 8001b1a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e067      	b.n	8001bf0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2204      	movs	r2, #4
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d050      	beq.n	8001bce <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	69da      	ldr	r2, [r3, #28]
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	401a      	ands	r2, r3
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d146      	bne.n	8001bce <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8001b4e:	613b      	str	r3, [r7, #16]
  return(result);
 8001b50:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b54:	2301      	movs	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f383 8810 	msr	PRIMASK, r3
}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4923      	ldr	r1, [pc, #140]	; (8001bf8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f383 8810 	msr	PRIMASK, r3
}
 8001b7a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8001b80:	61fb      	str	r3, [r7, #28]
  return(result);
 8001b82:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b86:	2301      	movs	r3, #1
 8001b88:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	f383 8810 	msr	PRIMASK, r3
}
 8001b90:	46c0      	nop			; (mov r8, r8)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	438a      	bics	r2, r1
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	f383 8810 	msr	PRIMASK, r3
}
 8001bac:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2280      	movs	r2, #128	; 0x80
 8001bbe:	2120      	movs	r1, #32
 8001bc0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2274      	movs	r2, #116	; 0x74
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e010      	b.n	8001bf0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	425a      	negs	r2, r3
 8001bde:	4153      	adcs	r3, r2
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	001a      	movs	r2, r3
 8001be4:	1dfb      	adds	r3, r7, #7
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d100      	bne.n	8001bee <UART_WaitOnFlagUntilTimeout+0x17a>
 8001bec:	e74b      	b.n	8001a86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b014      	add	sp, #80	; 0x50
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	fffffe5f 	.word	0xfffffe5f

08001bfc <__libc_init_array>:
 8001bfc:	b570      	push	{r4, r5, r6, lr}
 8001bfe:	2600      	movs	r6, #0
 8001c00:	4d0c      	ldr	r5, [pc, #48]	; (8001c34 <__libc_init_array+0x38>)
 8001c02:	4c0d      	ldr	r4, [pc, #52]	; (8001c38 <__libc_init_array+0x3c>)
 8001c04:	1b64      	subs	r4, r4, r5
 8001c06:	10a4      	asrs	r4, r4, #2
 8001c08:	42a6      	cmp	r6, r4
 8001c0a:	d109      	bne.n	8001c20 <__libc_init_array+0x24>
 8001c0c:	2600      	movs	r6, #0
 8001c0e:	f000 f821 	bl	8001c54 <_init>
 8001c12:	4d0a      	ldr	r5, [pc, #40]	; (8001c3c <__libc_init_array+0x40>)
 8001c14:	4c0a      	ldr	r4, [pc, #40]	; (8001c40 <__libc_init_array+0x44>)
 8001c16:	1b64      	subs	r4, r4, r5
 8001c18:	10a4      	asrs	r4, r4, #2
 8001c1a:	42a6      	cmp	r6, r4
 8001c1c:	d105      	bne.n	8001c2a <__libc_init_array+0x2e>
 8001c1e:	bd70      	pop	{r4, r5, r6, pc}
 8001c20:	00b3      	lsls	r3, r6, #2
 8001c22:	58eb      	ldr	r3, [r5, r3]
 8001c24:	4798      	blx	r3
 8001c26:	3601      	adds	r6, #1
 8001c28:	e7ee      	b.n	8001c08 <__libc_init_array+0xc>
 8001c2a:	00b3      	lsls	r3, r6, #2
 8001c2c:	58eb      	ldr	r3, [r5, r3]
 8001c2e:	4798      	blx	r3
 8001c30:	3601      	adds	r6, #1
 8001c32:	e7f2      	b.n	8001c1a <__libc_init_array+0x1e>
 8001c34:	08001ca4 	.word	0x08001ca4
 8001c38:	08001ca4 	.word	0x08001ca4
 8001c3c:	08001ca4 	.word	0x08001ca4
 8001c40:	08001ca8 	.word	0x08001ca8

08001c44 <memset>:
 8001c44:	0003      	movs	r3, r0
 8001c46:	1882      	adds	r2, r0, r2
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d100      	bne.n	8001c4e <memset+0xa>
 8001c4c:	4770      	bx	lr
 8001c4e:	7019      	strb	r1, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	e7f9      	b.n	8001c48 <memset+0x4>

08001c54 <_init>:
 8001c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c5a:	bc08      	pop	{r3}
 8001c5c:	469e      	mov	lr, r3
 8001c5e:	4770      	bx	lr

08001c60 <_fini>:
 8001c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c66:	bc08      	pop	{r3}
 8001c68:	469e      	mov	lr, r3
 8001c6a:	4770      	bx	lr
